<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title></title> 
    <script src="cdn.tailwindcss.com_3.4.17.js"></script>
    <style>
        .loader { border: 4px solid #f3f3f3; border-radius: 50%; border-top: 4px solid #3498db; width: 24px; height: 24px; animation: spin 2s linear infinite; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .line-clamp-3 { overflow: hidden; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; }
        [disabled] { cursor: not-allowed; opacity: 0.6; }
        
        #description-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 40;
            opacity: 0;
            transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            pointer-events: none;
        }
        #description-modal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -45%);
            z-index: 50;
            background-color: white;
            border-radius: 0.75rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            display: flex;
            flex-direction: column;
            opacity: 0;
            transition: opacity 0.3s cubic-bezier(0.4, 0, 0.2, 1), transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            pointer-events: none;
        }
        #description-modal-overlay.visible,
        #description-modal.visible {
            opacity: 1;
            pointer-events: auto;
        }
        #description-modal.visible {
            transform: translate(-50%, -50%);
        }
        #modal-body::-webkit-scrollbar, #channel-list::-webkit-scrollbar, #channel-select-list::-webkit-scrollbar {
            width: 8px;
        }
        #modal-body::-webkit-scrollbar-track, #channel-list::-webkit-scrollbar-track, #channel-select-list::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        #modal-body::-webkit-scrollbar-thumb, #channel-list::-webkit-scrollbar-thumb, #channel-select-list::-webkit-scrollbar-thumb {
            background: #d1d5db;
            border-radius: 10px;
        }
        #modal-body::-webkit-scrollbar-thumb:hover, #channel-list::-webkit-scrollbar-thumb:hover, #channel-select-list::-webkit-scrollbar-thumb:hover {
            background: #9ca3af;
        }
    </style>
</head>
<body class="bg-gray-100 font-sans">

    <div id="description-modal-overlay"></div>
    <div id="description-modal">
        <div class="flex items-center justify-between p-5 border-b bg-white rounded-t-xl">
            <h3 id="modal-title" class="text-xl font-bold text-gray-900 truncate pr-4" data-i18n-key="modal_title_default">视频描述</h3>
            <button id="modal-close-btn" class="text-gray-400 hover:text-gray-800 transition-colors text-3xl font-light leading-none">&times;</button>
        </div>
        <div id="modal-body" class="p-6 overflow-y-auto text-gray-700 bg-gray-50 text-base leading-relaxed whitespace-pre-wrap">
            </div>
        <div class="p-4 bg-gray-100 border-t rounded-b-xl text-right">
            <button id="copy-description-btn" class="bg-blue-500 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-600 transition-all duration-300" data-i18n-key="copy_description">复制描述</button>
        </div>
    </div>


    <div class="container mx-auto p-4 md:p-8">
        <header class="mb-8 flex justify-between items-start">
            <div>
                <h1 class="text-3xl md:text-4xl font-bold text-gray-800" data-i18n-key="main_title">YouTube 视频搜索与导出</h1>
                <p class="text-gray-600 mt-2" data-i18n-key="main_subtitle">从 YouTube 搜索视频数据，存入数据库，然后进行展示、筛选和导出。</p>
            </div>
            <div>
                <label for="language-switcher" class="sr-only" data-i18n-key="language">语言</label>
                <select id="language-switcher" class="bg-white border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="en">English</option>
                    <option value="fr">Français</option>
                    <option value="es">Español</option>
                    <option value="de">Deutsch</option>
                    <option value="it">Italiano</option>
                    <option value="ru">Русский</option>
                    <option value="ja">日本語</option>
                    <option value="ko">한국어</option>
                    <option value="zh-CN">中文 (简体)</option>
                    <option value="zh-TW">中文 (繁體)</option>
                    <option value="hi">हिन्दी</option>
                    <option value="th">ไทย</option>
                </select>
            </div>
        </header>

        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
            <h2 class="text-xl font-semibold mb-4 text-gray-700" data-i18n-key="fetch_data_title">1. 从 YouTube 获取数据</h2>
            
            <div class="mb-4">
                <div class="flex items-center space-x-4 border-b">
                    <button id="tab-by-channel" class="py-2 px-4 text-sm font-medium border-b-2 border-blue-500 text-blue-600" data-i18n-key="tab_by_channel">按频道获取</button>
                    <button id="tab-by-select" class="py-2 px-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" data-i18n-key="tab_by_select">从已有选择</button>
                    <button id="tab-by-keyword" class="py-2 px-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" data-i18n-key="tab_by_keyword">按关键字搜索</button>
                </div>
            </div>

            <div id="input-container-channel">
                <div class="flex flex-col md:flex-row gap-4 items-start">
                    <div class="relative flex-grow w-full">
                        <label for="channel-input" class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="channel_input_label">输入频道ID或用户名</label>
                        <textarea id="channel-input" data-i18n-placeholder="channel_input_placeholder" placeholder="输入频道ID (UC...) 或用户名 (@username)，用逗号、分号或换行分隔" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 pr-10" rows="3"></textarea>
                        <button id="clear-channel-input-btn" class="absolute top-8 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-600 hidden">
                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                        </button>
                    </div>
                </div>
            </div>

            <div id="input-container-select" class="hidden">
                 <div class="relative flex-grow w-full">
                    <label for="channel-select-btn" class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="channel_select_label">选择要更新的发布者</label>
                    <button id="channel-select-btn" class="w-full px-4 py-2 bg-white border border-gray-300 rounded-md text-left flex items-center justify-between">
                        <span id="channel-select-text" class="truncate" data-i18n-key="channel_select_placeholder">请选择发布者...</span>
                        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>
                    </button>
                    <div id="channel-select-dropdown" class="absolute z-20 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg hidden">
                        <div class="p-2 relative">
                            <input type="text" id="channel-select-search" data-i18n-placeholder="search_publisher_placeholder" placeholder="搜索发布者..." class="w-full px-3 py-2 border border-gray-300 rounded-md pr-10">
                            <button id="clear-channel-select-search-btn" class="absolute inset-y-0 right-0 top-2 flex items-center pr-3 text-gray-400 hover:text-gray-600 hidden">
                                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                            </button>
                        </div>
                        <ul id="channel-select-list" class="max-h-60 overflow-y-auto p-2">
                            </ul>
                    </div>
                </div>
            </div>

            <div id="input-container-keyword" class="hidden">
                 <div class="relative flex-grow w-full">
                    <label for="youtube-keyword" class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="keyword_input_label">输入搜索关键字</label>
                    <input type="text" id="youtube-keyword" data-i18n-placeholder="keyword_input_placeholder" placeholder="例如: 'Node.js 教程'" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 pr-10">
                    <button id="clear-youtube-keyword-btn" class="absolute inset-y-0 right-0 top-6 flex items-center pr-3 text-gray-400 hover:text-gray-600 hidden">
                        <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                    </button>
                </div>
            </div>

            <div class="text-right mt-4">
                 <button id="fetch-data-btn" class="bg-red-600 text-white font-bold py-2 px-6 rounded-md hover:bg-red-700 transition duration-300 flex items-center justify-center gap-2 ml-auto">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path d="M10 2a8 8 0 100 16 8 8 0 000-16zM9 13a1 1 0 112 0v-3a1 1 0 11-2 0v3zm1-7a1 1 0 100 2 1 1 0 000-2z" /></svg>
                    <span data-i18n-key="fetch_data_button">获取数据并入库</span>
                </button>
            </div>
            <div id="youtube-status" class="mt-4 text-sm"></div>
        </div>

        <div class="bg-white p-6 rounded-lg shadow-md">
            <div class="space-y-4 mb-6">
                <div class="relative">
                    <label for="filter-keyword" class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="filter_keyword_label">筛选关键词</label>
                    <input type="text" id="filter-keyword" data-i18n-placeholder="filter_keyword_placeholder" placeholder="筛选标题或描述..." class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 pr-10">
                    <button id="clear-keyword-btn" class="absolute inset-y-0 right-0 top-6 flex items-center pr-3 text-gray-400 hover:text-gray-600 hidden">
                        <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                    </button>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div class="relative">
                        <label for="channel-filter-btn" class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="publisher_label">发布者</label>
                        <button id="channel-filter-btn" class="w-full px-4 py-2 bg-white border border-gray-300 rounded-md text-left flex items-center justify-between">
                            <span id="channel-filter-text" class="truncate" data-i18n-key="all_publishers">所有发布者</span>
                            <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" /></svg>
                        </button>
                        <div id="channel-dropdown" class="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg hidden">
                            <div class="p-2 relative">
                                <input type="text" id="channel-search" data-i18n-placeholder="search_publisher_placeholder" placeholder="搜索发布者..." class="w-full px-3 py-2 border border-gray-300 rounded-md pr-10">
                                <button id="clear-channel-search-btn" class="absolute inset-y-0 right-0 top-2 flex items-center pr-3 text-gray-400 hover:text-gray-600 hidden">
                                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                                </button>
                            </div>
                            <ul id="channel-list" class="max-h-60 overflow-y-auto">
                                </ul>
                        </div>
                    </div>
                    <div>
                        <label for="sort-by" class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="sort_by_label">排序方式</label>
                        <select id="sort-by" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="published_at-DESC" data-i18n-key="sort_newest">发布时间 (由近至远)</option>
                            <option value="published_at-ASC" data-i18n-key="sort_oldest">发布时间 (由远至近)</option>
                            <option value="view_count-DESC" data-i18n-key="sort_views">观看数 (由多到少)</option>
                            <option value="like_count-DESC" data-i18n-key="sort_likes">点赞数 (由多到少)</option>
                            <option value="comment_count-DESC" data-i18n-key="sort_comments">评论数 (由多到少)</option>
                        </select>
                    </div>
                    <div>
                        <label for="limit-select" class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="per_page_label">每页显示</label>
                        <select id="limit-select" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="9">9</option>
                            <option value="18">18</option>
                            <option value="27">27</option>
                            <option value="36">36</option>
                            <option value="45">45</option>
                            <option value="60">60</option>
                            <option value="72">72</option>
                            <option value="99">99</option>
                            <option value="-1" data-i18n-key="all">All</option>
                        </select>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 items-end">
                    <div>
                        <label for="date-range-filter" class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="quick_time_label">快捷时间</label>
                        <select id="date-range-filter" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <option value="all" data-i18n-key="all_time">所有时间</option>
                            <option value="7" data-i18n-key="past_7_days">过去7天</option>
                            <option value="14" data-i18n-key="past_14_days">过去14天</option>
                            <option value="30" data-i18n-key="past_30_days">过去30天</option>
                            <option value="60" data-i18n-key="past_60_days">过去60天</option>
                            <option value="90" data-i18n-key="past_90_days">过去90天</option>
                            <option value="120" data-i18n-key="past_120_days">过去120天</option>
                            <option value="180" data-i18n-key="past_180_days">过去180天</option>
                            <option value="360" data-i18n-key="past_360_days">过去360天</option>
                            <option value="720" data-i18n-key="past_720_days">过去720天</option>
                        </select>
                    </div>
                    <div class="lg:col-span-2">
                        <label class="block text-sm font-medium text-gray-700 mb-1" data-i18n-key="custom_range_label">自定义时间范围</label>
                        <div class="flex items-center gap-2">
                            <input type="date" id="start-date" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <span class="text-gray-500" data-i18n-key="to">至</span>
                            <input type="date" id="end-date" class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                        </div>
                    </div>
                </div>
                <div class="flex items-center justify-between pt-2">
                    <div class="flex items-center gap-4">
                        <button id="clear-filters-btn" class="bg-gray-500 text-white font-bold py-2 px-4 rounded-md hover:bg-gray-600 transition duration-300" data-i18n-key="clear_filters_button">清空筛选</button>
                        <button id="export-excel-btn" class="bg-green-600 text-white font-bold py-2 px-4 rounded-md hover:bg-green-700 transition duration-300" data-i18n-key="export_excel_button">导出 Excel</button>
                    </div>
                    
                    <div id="pagination-controls" class="flex items-center gap-2">
                        <button id="prev-page-btn" class="bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-600 transition" data-i18n-key="prev_page">上一页</button>
                        <span id="page-info" class="text-sm text-gray-700 font-medium px-2"></span>
                        <button id="next-page-btn" class="bg-blue-500 text-white font-bold py-2 px-4 rounded hover:bg-blue-600 transition" data-i18n-key="next_page">下一页</button>
                    </div>

                    <span id="data-count-info" class="text-sm text-gray-600"></span>
                </div>
            </div>

            <div id="video-list-container">
                <div id="video-list" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6"></div>
                <div id="list-loader" class="text-center p-8 hidden"><div class="loader inline-block"></div><p class="text-gray-500 mt-2" data-i18n-key="loading_data">正在加载数据...</p></div>
                <div id="no-data" class="text-center p-8 hidden"><p class="text-gray-500" data-i18n-key="no_data_message">数据库中没有数据。请先从 YouTube 搜索。</p></div>
                <div id="no-results" class="text-center p-8 hidden"><p class="text-gray-500" data-i18n-key="no_results_message">没有匹配的结果。</p></div>
            </div>
            
        </div>
    </div>

    <script>
        const API_BASE_URL = ''; 
        const dom = {
            fetchDataBtn: document.getElementById('fetch-data-btn'),
            channelInput: document.getElementById('channel-input'),
            clearChannelInputBtn: document.getElementById('clear-channel-input-btn'),
            youtubeKeyword: document.getElementById('youtube-keyword'),
            clearYoutubeKeywordBtn: document.getElementById('clear-youtube-keyword-btn'),
            youtubeStatus: document.getElementById('youtube-status'),
            filterKeyword: document.getElementById('filter-keyword'),
            clearKeywordBtn: document.getElementById('clear-keyword-btn'),
            sortBy: document.getElementById('sort-by'),
            limitSelect: document.getElementById('limit-select'),
            channelFilterBtn: document.getElementById('channel-filter-btn'),
            channelFilterText: document.getElementById('channel-filter-text'),
            channelDropdown: document.getElementById('channel-dropdown'),
            channelSearch: document.getElementById('channel-search'),
            clearChannelSearchBtn: document.getElementById('clear-channel-search-btn'),
            channelList: document.getElementById('channel-list'),
            dateRangeFilter: document.getElementById('date-range-filter'),
            startDate: document.getElementById('start-date'),
            endDate: document.getElementById('end-date'),
            clearFiltersBtn: document.getElementById('clear-filters-btn'),
            exportExcelBtn: document.getElementById('export-excel-btn'),
            dataCountInfo: document.getElementById('data-count-info'),
            videoList: document.getElementById('video-list'),
            listLoader: document.getElementById('list-loader'),
            noData: document.getElementById('no-data'),
            noResults: document.getElementById('no-results'),
            paginationControls: document.getElementById('pagination-controls'),
            prevPageBtn: document.getElementById('prev-page-btn'),
            nextPageBtn: document.getElementById('next-page-btn'),
            pageInfo: document.getElementById('page-info'),
            modalOverlay: document.getElementById('description-modal-overlay'),
            modal: document.getElementById('description-modal'),
            modalTitle: document.getElementById('modal-title'),
            modalBody: document.getElementById('modal-body'),
            modalCloseBtn: document.getElementById('modal-close-btn'),
            copyDescriptionBtn: document.getElementById('copy-description-btn'),
            tabByChannel: document.getElementById('tab-by-channel'),
            tabBySelect: document.getElementById('tab-by-select'),
            tabByKeyword: document.getElementById('tab-by-keyword'),
            inputContainerChannel: document.getElementById('input-container-channel'),
            inputContainerSelect: document.getElementById('input-container-select'), 
            inputContainerKeyword: document.getElementById('input-container-keyword'),
            channelSelectBtn: document.getElementById('channel-select-btn'),
            channelSelectText: document.getElementById('channel-select-text'),
            channelSelectDropdown: document.getElementById('channel-select-dropdown'),
            channelSelectSearch: document.getElementById('channel-select-search'),
            clearChannelSelectSearchBtn: document.getElementById('clear-channel-select-search-btn'),
            channelSelectList: document.getElementById('channel-select-list'),
            languageSwitcher: document.getElementById('language-switcher'),
        };

        const state = {
            fetchMode: 'channel',
            currentPage: 1,
            totalPages: 1,
            totalItemsInDB: 0,
            currentRenderedVideos: [],
            limit: 9,
            search: '',
            sortBy: 'published_at',
            sortOrder: 'DESC',
            startDate: '',
            endDate: '',
            channel: '',
            channelRemarks: JSON.parse(localStorage.getItem('channelRemarks')) || {},
            currentLanguage: 'zh-CN',
        };
        
        const showStatus = (messageKey, isError = false, params = {}) => {
            dom.youtubeStatus.textContent = translate(messageKey, params);
            dom.youtubeStatus.className = `mt-4 text-sm ${isError ? 'text-red-500' : 'text-green-600'}`;
        };
        
        const toggleButtonLoading = (button, isLoading) => {
            button.disabled = isLoading;
            if (isLoading) {
                button.classList.add('opacity-50');
                button.dataset.originalHtml = button.innerHTML;
                button.innerHTML = `<div class="loader !w-5 !h-5 !border-2 !border-t-white mx-auto"></div>`;
            } else {
                button.classList.remove('opacity-50');
                if(button.dataset.originalHtml) button.innerHTML = button.dataset.originalHtml;
            }
        };

        const formatNumber = (num) => {
            if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
            if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
            return num;
        };

        const renderVideos = (videos) => {
            dom.videoList.innerHTML = '';
            state.currentRenderedVideos = videos;
            videos.forEach(video => {
                const videoCard = `
                    <div class="bg-white rounded-lg shadow-md overflow-hidden transform hover:-translate-y-1 transition-transform duration-300 flex flex-col cursor-pointer" data-video-id="${video.video_id}">
                        <div class="relative">
                            <img src="${video.thumbnail_url || 'https://placehold.co/480x360/e2e8f0/a0aec0?text=No+Image'}" alt="Thumbnail for ${video.title}" class="w-full h-48 object-cover">
                            <div class="absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
                                <span class="text-white text-sm bg-black bg-opacity-50 px-2 py-1 rounded" data-i18n-key="view_description"></span>
                            </div>
                        </div>
                        <div class="p-4 flex flex-col flex-grow">
                            <p class="text-sm text-gray-500 mb-1 truncate" title="${video.channel_title}">${video.channel_title || 'N/A'}</p>
                            <h3 class="text-md font-bold text-gray-800 mb-2 leading-snug line-clamp-3" title="${video.title}">
                                <a href="https://www.youtube.com/watch?v=${video.video_id}" target="_blank" rel="noopener noreferrer" class="hover:text-red-600 transition-colors" onclick="event.stopPropagation()">${video.title}</a>
                            </h3>
                            <div class="flex-grow"></div>
                            <div class="flex items-center justify-between text-sm text-gray-600 mt-2 pt-2 border-t">
                                <span title="${translate('views')}">👁️ ${formatNumber(video.view_count)}</span>
                                <span title="${translate('likes')}">👍 ${formatNumber(video.like_count)}</span>
                                <span title="${translate('comments')}">💬 ${formatNumber(video.comment_count)}</span>
                            </div>
                            <p class="text-xs text-gray-500 text-right mt-2">
                                ${new Date(video.published_at).toLocaleDateString()}
                            </p>
                        </div>
                    </div>`;
                dom.videoList.innerHTML += videoCard;
            });
            translatePage(state.currentLanguage, dom.videoList);
        };
        
        const updatePaginationControls = (filteredCount) => {
            dom.dataCountInfo.textContent = translate('data_count_info', { filtered: filteredCount, total: state.totalItemsInDB });
            if (state.limit === -1 || state.totalPages <= 1) {
                dom.paginationControls.classList.add('hidden');
                return;
            }
            dom.paginationControls.classList.remove('hidden');
            dom.pageInfo.textContent = translate('page_info', { current: state.currentPage, total: state.totalPages });
            dom.prevPageBtn.disabled = state.currentPage <= 1;
            dom.nextPageBtn.disabled = state.currentPage >= state.totalPages;
        };

        const populateChannelFilter = async () => {
            try {
                const response = await fetch(`${API_BASE_URL || window.location.origin}/api/channels`);
                if (!response.ok) return;
                const channels = await response.json();
                
                dom.channelList.innerHTML = '';
                
                const allChannelsOption = document.createElement('li');
                allChannelsOption.innerHTML = `<div class="flex items-center justify-between w-full px-4 py-2 hover:bg-gray-100 cursor-pointer"><span class="channel-display-name" data-i18n-key="all_publishers"></span></div>`;
                allChannelsOption.dataset.value = '';
                dom.channelList.appendChild(allChannelsOption);

                channels.forEach(channel => {
                    const remark = state.channelRemarks[channel] || '';
                    const displayText = remark ? `${channel} (${remark})` : channel;
                    
                    const li = document.createElement('li');
                    li.dataset.value = channel;
                    li.className = "group";
                    
                    li.innerHTML = `
                        <div class="flex items-center justify-between w-full px-4 py-2 hover:bg-gray-100 cursor-pointer">
                            <span class="channel-display-name truncate" title="${displayText}">${displayText}</span>
                            <button class="edit-remark-btn p-1 rounded-full hover:bg-gray-200 opacity-0 group-hover:opacity-100 transition-opacity">
                                <svg class="h-4 w-4 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"/></svg>
                            </button>
                        </div>
                        <div class="edit-container px-2 py-1 hidden">
                            <input type="text" value="${remark}" data-i18n-placeholder="add_remark_placeholder" class="w-full text-sm border-gray-300 rounded-md">
                        </div>
                    `;
                    dom.channelList.appendChild(li);
                });
                translatePage(state.currentLanguage, dom.channelList);
            } catch (error) {
                console.error("无法加载频道列表:", error);
            }
        };

        const populateChannelSelect = async () => {
            try {
                const response = await fetch(`${API_BASE_URL || window.location.origin}/api/unique-channels`);
                 if (!response.ok) {
                    dom.channelSelectList.innerHTML = `<li class="px-3 py-2 text-gray-500" data-i18n-key="loading_data_error"></li>`;
                    return;
                }
                const channels = await response.json();
                dom.channelSelectList.innerHTML = '';
                if (channels.length === 0) {
                    dom.channelSelectList.innerHTML = `<li class="px-3 py-2 text-gray-500" data-i18n-key="no_data_message"></li>`;
                } else {
                    channels.forEach(channel => {
                        const li = document.createElement('li');
                        li.className = 'flex items-center p-2 hover:bg-gray-100 rounded-md';
                        li.innerHTML = `
                            <input type="checkbox" id="ch-select-${channel.channel_id}" value="${channel.channel_id}" class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                            <label for="ch-select-${channel.channel_id}" class="ml-3 min-w-0 flex-1 text-gray-700 cursor-pointer">
                                <span class="block font-medium truncate">${channel.channel_title}</span>
                                <span class="block text-xs text-gray-500">${channel.channel_id}</span>
                            </label>
                        `;
                        dom.channelSelectList.appendChild(li);
                    });
                }
                translatePage(state.currentLanguage, dom.channelSelectList);
            } catch (error) {
                console.error("无法加载唯一频道列表:", error);
                dom.channelSelectList.innerHTML = `<li class="px-3 py-2 text-red-500">${translate('loading_data_error')}</li>`;
            }
        };

        const fetchInitialStats = async () => {
            try {
                const response = await fetch(`${API_BASE_URL || window.location.origin}/api/stats`);
                if (!response.ok) return;
                const { totalVideos } = await response.json();
                state.totalItemsInDB = totalVideos;
            } catch (error) {
                console.error("无法加载统计数据:", error);
            }
        };

        const fetchAndRenderVideos = async () => {
            dom.listLoader.classList.remove('hidden');
            [dom.noData, dom.noResults].forEach(el => el.classList.add('hidden'));
            dom.videoList.innerHTML = '';
            dom.paginationControls.classList.add('hidden');

            const params = new URLSearchParams({
                page: state.currentPage,
                limit: state.limit,
                sortBy: state.sortBy,
                sortOrder: state.sortOrder,
                search: state.search,
                startDate: state.startDate,
                endDate: state.endDate,
                channel: state.channel,
            });

            try {
                const response = await fetch(`${API_BASE_URL || window.location.origin}/api/videos-paginated?${params.toString()}`);
                if (!response.ok) throw new Error('网络响应错误');
                const result = await response.json();
                
                state.totalPages = result.pagination.totalPages;
                
                if (result.data.length > 0) {
                    renderVideos(result.data);
                } else {
                    if (state.search || state.startDate || state.endDate || state.channel) {
                        dom.noResults.classList.remove('hidden');
                    } else {
                        dom.noData.classList.remove('hidden');
                    }
                }
                updatePaginationControls(result.pagination.totalItems);
            } catch (error) {
                console.error('获取视频失败:', error);
                dom.noData.textContent = translate('loading_data_error');
                dom.noData.classList.remove('hidden');
            } finally {
                dom.listLoader.classList.add('hidden');
            }
        };

        const handleFilterChange = () => {
            state.currentPage = 1;
            state.search = dom.filterKeyword.value;
            const [sortBy, sortOrder] = dom.sortBy.value.split('-');
            state.sortBy = sortBy;
            state.sortOrder = sortOrder;
            state.limit = parseInt(dom.limitSelect.value, 10);
            state.startDate = dom.startDate.value;
            state.endDate = dom.endDate.value;
            state.channel = dom.channelFilterBtn.dataset.value || '';
            fetchAndRenderVideos();
        };

        const showModal = (video) => {
            dom.modalTitle.textContent = video.title;
            dom.modalBody.textContent = video.description || translate('no_description');
            dom.modalOverlay.classList.add('visible');
            dom.modal.classList.add('visible');
        };

        const hideModal = () => {
            dom.modalOverlay.classList.remove('visible');
            dom.modal.classList.remove('visible');
        };

        dom.videoList.addEventListener('click', (e) => {
            const card = e.target.closest('[data-video-id]');
            if (card) {
                const videoId = card.dataset.videoId;
                const video = state.currentRenderedVideos.find(v => v.video_id === videoId);
                if (video) showModal(video);
            }
        });
        dom.modalCloseBtn.addEventListener('click', hideModal);
        dom.modalOverlay.addEventListener('click', hideModal);
        
        dom.copyDescriptionBtn.addEventListener('click', () => {
            const descriptionText = dom.modalBody.textContent;
            navigator.clipboard.writeText(descriptionText).then(() => {
                const originalText = dom.copyDescriptionBtn.textContent;
                dom.copyDescriptionBtn.textContent = translate('copied');
                dom.copyDescriptionBtn.disabled = true;
                setTimeout(() => {
                    dom.copyDescriptionBtn.textContent = originalText;
                    dom.copyDescriptionBtn.disabled = false;
                    translatePage(state.currentLanguage, dom.copyDescriptionBtn.parentElement);
                }, 2000);
            }).catch(err => {
                 console.error('无法复制描述: ', err);
            });
        });

        dom.fetchDataBtn.addEventListener('click', async () => {
            let endpoint = '';
            let payload = {};
            let identifiers = [];

            if (state.fetchMode === 'channel') {
                identifiers = dom.channelInput.value.split(/[;, \n]+/).map(s => s.trim()).filter(Boolean);
                if (identifiers.length === 0) {
                    return showStatus('status_no_channel_id', true);
                }
                showStatus('status_fetching_from_channels', false, { count: identifiers.length });
            } else if (state.fetchMode === 'select') {
                const selectedCheckboxes = dom.channelSelectList.querySelectorAll('input[type="checkbox"]:checked');
                identifiers = Array.from(selectedCheckboxes).map(cb => cb.value);
                if (identifiers.length === 0) {
                    return showStatus('status_no_channel_selected', true);
                }
                showStatus('status_fetching_from_channels', false, { count: identifiers.length });
            } else {
                const keyword = dom.youtubeKeyword.value.trim();
                if (!keyword) {
                    return showStatus('status_no_keyword', true);
                }
                endpoint = '/api/search';
                payload = { keyword };
                showStatus('status_searching_by_keyword', false, { keyword: keyword });
            }

            if (state.fetchMode === 'channel' || state.fetchMode === 'select') {
                endpoint = '/api/fetch-by-channels';
                payload = { identifiers };
            }

            toggleButtonLoading(dom.fetchDataBtn, true);
            
            try {
                const response = await fetch(`${API_BASE_URL || window.location.origin}${endpoint}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload),
                });
                const result = await response.json();
                if (!response.ok) throw new Error(result.error || result.message || '未知错误');
                showStatus('status_fetch_success', false, { count: result.updatedOrInsertedCount || 0 });
                await fetchInitialStats();
                await populateChannelFilter();
                await populateChannelSelect();
                handleFilterChange();
            } catch (error) {
                console.error('获取数据失败:', error);
                showStatus('status_fetch_error', true, { message: error.message });
            } finally {
                toggleButtonLoading(dom.fetchDataBtn, false);
            }
        });

        const switchFetchMode = (mode) => {
            state.fetchMode = mode;
            const allContainers = [dom.inputContainerChannel, dom.inputContainerSelect, dom.inputContainerKeyword];
            const allTabs = [dom.tabByChannel, dom.tabBySelect, dom.tabByKeyword];
            
            let activeContainer;
            let activeTab;

            if (mode === 'channel') {
                activeContainer = dom.inputContainerChannel;
                activeTab = dom.tabByChannel;
            } else if (mode === 'select') {
                activeContainer = dom.inputContainerSelect;
                activeTab = dom.tabBySelect;
            } else {
                activeContainer = dom.inputContainerKeyword;
                activeTab = dom.tabByKeyword;
            }

            allContainers.forEach(c => c.classList.add('hidden'));
            activeContainer.classList.remove('hidden');
            
            allTabs.forEach(t => {
                t.classList.remove('border-blue-500', 'text-blue-600');
                t.classList.add('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
            });
            activeTab.classList.add('border-blue-500', 'text-blue-600');
            activeTab.classList.remove('border-transparent', 'text-gray-500', 'hover:text-gray-700', 'hover:border-gray-300');
        };

        dom.tabByChannel.addEventListener('click', () => switchFetchMode('channel'));
        dom.tabBySelect.addEventListener('click', () => switchFetchMode('select'));
        dom.tabByKeyword.addEventListener('click', () => switchFetchMode('keyword'));
        
        dom.channelInput.addEventListener('input', () => {
            dom.clearChannelInputBtn.classList.toggle('hidden', !dom.channelInput.value);
        });

        dom.clearChannelInputBtn.addEventListener('click', () => {
            dom.channelInput.value = '';
            dom.clearChannelInputBtn.classList.add('hidden');
            dom.channelInput.focus();
        });
        
        let debounceTimer;
        dom.filterKeyword.addEventListener('input', () => {
            dom.clearKeywordBtn.classList.toggle('hidden', !dom.filterKeyword.value);
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(handleFilterChange, 500);
        });

        dom.clearKeywordBtn.addEventListener('click', () => {
            dom.filterKeyword.value = '';
            dom.clearKeywordBtn.classList.add('hidden');
            handleFilterChange();
        });

        dom.youtubeKeyword.addEventListener('input', () => {
            dom.clearYoutubeKeywordBtn.classList.toggle('hidden', !dom.youtubeKeyword.value);
        });

        dom.clearYoutubeKeywordBtn.addEventListener('click', () => {
            dom.youtubeKeyword.value = '';
            dom.clearYoutubeKeywordBtn.classList.add('hidden');
            dom.youtubeKeyword.focus();
        });

        [dom.sortBy, dom.limitSelect].forEach(el => el.addEventListener('change', handleFilterChange));

        dom.channelFilterBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            dom.channelDropdown.classList.toggle('hidden');
        });

        dom.channelDropdown.addEventListener('click', (e) => {
            e.stopPropagation();
        });

        const filterChannelList = () => {
            const searchTerm = dom.channelSearch.value.toLowerCase();
            dom.clearChannelSearchBtn.classList.toggle('hidden', !searchTerm);
            dom.channelList.querySelectorAll('li').forEach(li => {
                const channelName = li.querySelector('.channel-display-name').textContent.toLowerCase();
                li.classList.toggle('hidden', !channelName.includes(searchTerm));
            });
        };

        dom.channelSearch.addEventListener('input', filterChannelList);
        
        dom.clearChannelSearchBtn.addEventListener('click', () => {
            dom.channelSearch.value = '';
            filterChannelList();
            dom.channelSearch.focus();
        });

        dom.channelList.addEventListener('click', (e) => {
            const li = e.target.closest('li');
            if (!li) return;

            const editBtn = e.target.closest('.edit-remark-btn');
            if (editBtn) {
                const displayDiv = li.querySelector('div:first-child');
                const editDiv = li.querySelector('.edit-container');
                displayDiv.classList.toggle('hidden');
                editDiv.classList.toggle('hidden');
                if (!editDiv.classList.contains('hidden')) {
                    editDiv.querySelector('input').focus();
                }
                return;
            }

            const value = li.dataset.value;
            const text = li.querySelector('.channel-display-name').textContent;
            dom.channelFilterBtn.dataset.value = value;
            dom.channelFilterText.textContent = text;
            dom.channelDropdown.classList.add('hidden');
            handleFilterChange();
        });

        dom.channelList.addEventListener('focusout', (e) => {
            if (e.target.tagName === 'INPUT' && e.target.parentElement.classList.contains('edit-container')) {
                const li = e.target.closest('li');
                const originalName = li.dataset.value;
                const newRemark = e.target.value.trim();
                
                state.channelRemarks[originalName] = newRemark;
                localStorage.setItem('channelRemarks', JSON.stringify(state.channelRemarks));
                
                const displayText = newRemark ? `${originalName} (${newRemark})` : originalName;
                li.querySelector('.channel-display-name').textContent = displayText;
                li.querySelector('.channel-display-name').title = displayText;

                li.querySelector('div:first-child').classList.remove('hidden');
                e.target.parentElement.classList.add('hidden');
            }
        });
         dom.channelList.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.target.tagName === 'INPUT') {
                e.target.blur();
            }
        });


        document.addEventListener('click', () => {
            if (!dom.channelDropdown.classList.contains('hidden')) {
                dom.channelDropdown.classList.add('hidden');
            }
            if (!dom.channelSelectDropdown.classList.contains('hidden')) {
                dom.channelSelectDropdown.classList.add('hidden');
            }
        });

        dom.channelSelectBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            dom.channelSelectDropdown.classList.toggle('hidden');
        });

        dom.channelSelectDropdown.addEventListener('click', (e) => {
            e.stopPropagation();
        });

        const updateChannelSelectButtonText = () => {
            const selectedCount = dom.channelSelectList.querySelectorAll('input:checked').length;
            if (selectedCount === 0) {
                dom.channelSelectText.textContent = translate('channel_select_placeholder');
            } else {
                dom.channelSelectText.textContent = translate('channels_selected', { count: selectedCount });
            }
        };

        dom.channelSelectList.addEventListener('change', updateChannelSelectButtonText);
        
        const filterChannelSelectList = () => {
            const searchTerm = dom.channelSelectSearch.value.toLowerCase();
            dom.clearChannelSelectSearchBtn.classList.toggle('hidden', !searchTerm);
            dom.channelSelectList.querySelectorAll('li').forEach(li => {
                const channelTitle = li.querySelector('.font-medium').textContent.toLowerCase();
                const channelId = li.querySelector('.text-xs').textContent.toLowerCase();
                li.classList.toggle('hidden', !channelTitle.includes(searchTerm) && !channelId.includes(searchTerm));
            });
        };

        dom.channelSelectSearch.addEventListener('input', filterChannelSelectList);
        
        dom.clearChannelSelectSearchBtn.addEventListener('click', () => {
            dom.channelSelectSearch.value = '';
            filterChannelSelectList();
            dom.channelSelectSearch.focus();
        });

        dom.dateRangeFilter.addEventListener('change', () => {
            const days = parseInt(dom.dateRangeFilter.value, 10);
            const isAllTime = isNaN(days);

            dom.startDate.disabled = !isAllTime;
            dom.endDate.disabled = !isAllTime;

            if (isAllTime) {
            } else {
                const endDate = new Date();
                const startDate = new Date();
                startDate.setDate(endDate.getDate() - days);
                dom.endDate.value = endDate.toISOString().split('T')[0];
                dom.startDate.value = startDate.toISOString().split('T')[0];
            }
            handleFilterChange();
        });

        const customDateChangeHandler = () => {
            dom.dateRangeFilter.value = 'all';
            handleFilterChange();
        };
        dom.startDate.addEventListener('change', customDateChangeHandler);
        dom.endDate.addEventListener('change', customDateChangeHandler);


        dom.clearFiltersBtn.addEventListener('click', () => {
            dom.filterKeyword.value = '';
            dom.sortBy.value = 'published_at-DESC';
            dom.limitSelect.value = '9';
            dom.channelFilterBtn.dataset.value = '';
            dom.channelFilterText.textContent = translate('all_publishers');
            dom.dateRangeFilter.value = 'all';
            dom.startDate.value = '';
            dom.endDate.value = '';
            dom.startDate.disabled = false;
            dom.endDate.disabled = false;
            dom.clearKeywordBtn.classList.add('hidden');
            handleFilterChange();
        });

        dom.prevPageBtn.addEventListener('click', () => {
            if (state.currentPage > 1) {
                state.currentPage--;
                fetchAndRenderVideos();
            }
        });

        dom.nextPageBtn.addEventListener('click', () => {
            if (state.currentPage < state.totalPages) {
                state.currentPage++;
                fetchAndRenderVideos();
            }
        });

        dom.exportExcelBtn.addEventListener('click', () => {
            const params = new URLSearchParams({
                sortBy: state.sortBy,
                sortOrder: state.sortOrder,
                search: state.search,
                startDate: state.startDate,
                endDate: state.endDate,
                channel: state.channel,
            });
            window.location.href = `${API_BASE_URL || window.location.origin}/api/export?${params.toString()}`;
        });

        // --- Internationalization (i18n) ---
        const translations = {
            // [FIX] Populated all missing language translations
            'en': {
                page_title: 'YouTube Video Search & Export',
                main_title: 'YouTube Video Search & Export',
                main_subtitle: 'Fetch video data from YouTube, save to database, then display, filter, and export.',
                fetch_data_title: '1. Fetch Data from YouTube',
                tab_by_channel: 'By Channel',
                tab_by_select: 'Select Existing',
                tab_by_keyword: 'By Keyword',
                channel_input_label: 'Enter Channel IDs or Usernames',
                channel_input_placeholder: 'Enter Channel IDs (UC...) or Usernames (@username), separated by commas, semicolons, or newlines',
                channel_select_label: 'Select Publishers to Update',
                channel_select_placeholder: 'Please select publishers...',
                channels_selected: '{count} publisher(s) selected',
                keyword_input_label: 'Enter Search Keyword',
                keyword_input_placeholder: 'e.g., \'Node.js Tutorial\'',
                fetch_data_button: 'Fetch Data & Save',
                filter_keyword_label: 'Filter by Keyword',
                filter_keyword_placeholder: 'Filter by title or description...',
                publisher_label: 'Publisher',
                all_publishers: 'All Publishers',
                search_publisher_placeholder: 'Search publishers...',
                sort_by_label: 'Sort By',
                sort_newest: 'Date (Newest First)',
                sort_oldest: 'Date (Oldest First)',
                sort_views: 'Views (Most First)',
                sort_likes: 'Likes (Most First)',
                sort_comments: 'Comments (Most First)',
                per_page_label: 'Items Per Page',
                all: 'All',
                quick_time_label: 'Quick Time Range',
                all_time: 'All Time',
                past_7_days: 'Past 7 Days',
                past_14_days: 'Past 14 Days',
                past_30_days: 'Past 30 Days',
                past_60_days: 'Past 60 Days',
                past_90_days: 'Past 90 Days',
                past_120_days: 'Past 120 Days',
                past_180_days: 'Past 180 Days',
                past_360_days: 'Past 360 Days',
                past_720_days: 'Past 720 Days',
                custom_range_label: 'Custom Time Range',
                to: 'to',
                clear_filters_button: 'Clear Filters',
                export_excel_button: 'Export Excel',
                prev_page: 'Prev',
                next_page: 'Next',
                loading_data: 'Loading data...',
                no_data_message: 'No data in the database. Please fetch from YouTube first.',
                no_results_message: 'No matching results found.',
                modal_title_default: 'Video Description',
                copy_description: 'Copy Description',
                view_description: 'View Description',
                views: 'Views',
                likes: 'Likes',
                comments: 'Comments',
                add_remark_placeholder: 'Add remark...',
                copied: 'Copied!',
                no_description: 'No description available.',
                page_info: 'Page {current} / {total}',
                data_count_info: 'Showing {filtered} / {total} videos',
                loading_data_error: 'Failed to load data.',
                status_no_channel_id: 'Please enter at least one channel ID or username.',
                status_no_channel_selected: 'Please select at least one publisher to update.',
                status_fetching_from_channels: 'Fetching data from {count} channels...',
                status_no_keyword: 'Please enter a keyword.',
                status_searching_by_keyword: 'Searching by keyword "{keyword}"...',
                status_fetch_success: 'Operation complete. {count} records added or updated.',
                status_fetch_error: 'Error: {message}',
            },
            'fr': {
                page_title: 'Recherche et Exportation de Vidéos YouTube',
                main_title: 'Recherche et Exportation de Vidéos YouTube',
                main_subtitle: 'Récupérez les données des vidéos de YouTube, enregistrez-les dans la base de données, puis affichez, filtrez et exportez.',
                fetch_data_title: '1. Récupérer les données de YouTube',
                tab_by_channel: 'Par Chaîne',
                tab_by_select: 'Sélectionner Existant',
                tab_by_keyword: 'Par Mot-clé',
                channel_input_label: 'Entrez les ID de chaîne ou les noms d\'utilisateur',
                channel_input_placeholder: 'Entrez les ID de chaîne (UC...) ou les noms d\'utilisateur (@nom), séparés par des virgules, des points-virgules ou des sauts de ligne',
                channel_select_label: 'Sélectionnez les éditeurs à mettre à jour',
                channel_select_placeholder: 'Veuillez sélectionner des éditeurs...',
                channels_selected: '{count} éditeur(s) sélectionné(s)',
                keyword_input_label: 'Entrez le mot-clé de recherche',
                keyword_input_placeholder: 'ex: \'Tutoriel Node.js\'',
                fetch_data_button: 'Récupérer et Enregistrer',
                filter_keyword_label: 'Filtrer par mot-clé',
                filter_keyword_placeholder: 'Filtrer par titre ou description...',
                publisher_label: 'Éditeur',
                all_publishers: 'Tous les éditeurs',
                search_publisher_placeholder: 'Rechercher des éditeurs...',
                sort_by_label: 'Trier par',
                sort_newest: 'Date (Plus récent d\'abord)',
                sort_oldest: 'Date (Plus ancien d\'abord)',
                sort_views: 'Vues (Plus grand nombre d\'abord)',
                sort_likes: 'J\'aime (Plus grand nombre d\'abord)',
                sort_comments: 'Commentaires (Plus grand nombre d\'abord)',
                per_page_label: 'Éléments par page',
                all: 'Tous',
                quick_time_label: 'Période rapide',
                all_time: 'Toute la période',
                past_7_days: '7 derniers jours',
                past_14_days: '14 derniers jours',
                past_30_days: '30 derniers jours',
                past_60_days: '60 derniers jours',
                past_90_days: '90 derniers jours',
                past_120_days: '120 derniers jours',
                past_180_days: '180 derniers jours',
                past_360_days: '360 derniers jours',
                past_720_days: '720 derniers jours',
                custom_range_label: 'Période personnalisée',
                to: 'à',
                clear_filters_button: 'Effacer les filtres',
                export_excel_button: 'Exporter Excel',
                prev_page: 'Précédent',
                next_page: 'Suivant',
                loading_data: 'Chargement des données...',
                no_data_message: 'Aucune donnée dans la base de données. Veuillez d\'abord récupérer depuis YouTube.',
                no_results_message: 'Aucun résultat correspondant trouvé.',
                modal_title_default: 'Description de la vidéo',
                copy_description: 'Copier la description',
                view_description: 'Voir la description',
                views: 'Vues',
                likes: 'J\'aime',
                comments: 'Commentaires',
                add_remark_placeholder: 'Ajouter une remarque...',
                copied: 'Copié !',
                no_description: 'Aucune description disponible.',
                page_info: 'Page {current} / {total}',
                data_count_info: 'Affichage de {filtered} / {total} vidéos',
                loading_data_error: 'Échec du chargement des données.',
                status_no_channel_id: 'Veuillez entrer au moins un ID de chaîne ou un nom d\'utilisateur.',
                status_no_channel_selected: 'Veuillez sélectionner au moins un éditeur à mettre à jour.',
                status_fetching_from_channels: 'Récupération des données de {count} chaînes...',
                status_no_keyword: 'Veuillez entrer un mot-clé.',
                status_searching_by_keyword: 'Recherche par mot-clé "{keyword}"...',
                status_fetch_success: 'Opération terminée. {count} enregistrements ajoutés ou mis à jour.',
                status_fetch_error: 'Erreur : {message}',
            },
            'es': {
                page_title: 'Búsqueda y Exportación de Videos de YouTube',
                main_title: 'Búsqueda y Exportación de Videos de YouTube',
                main_subtitle: 'Obtenga datos de videos de YouTube, guárdelos en la base de datos, y luego muestre, filtre y exporte.',
                fetch_data_title: '1. Obtener datos de YouTube',
                tab_by_channel: 'Por Canal',
                tab_by_select: 'Seleccionar Existente',
                tab_by_keyword: 'Por Palabra Clave',
                channel_input_label: 'Ingrese IDs de canal o nombres de usuario',
                channel_input_placeholder: 'Ingrese IDs de canal (UC...) o nombres de usuario (@usuario), separados por comas, punto y coma o saltos de línea',
                channel_select_label: 'Seleccione editores para actualizar',
                channel_select_placeholder: 'Por favor seleccione editores...',
                channels_selected: '{count} editor(es) seleccionado(s)',
                keyword_input_label: 'Ingrese palabra clave de búsqueda',
                keyword_input_placeholder: 'ej: \'Tutorial de Node.js\'',
                fetch_data_button: 'Obtener y Guardar',
                filter_keyword_label: 'Filtrar por palabra clave',
                filter_keyword_placeholder: 'Filtrar por título o descripción...',
                publisher_label: 'Editor',
                all_publishers: 'Todos los editores',
                search_publisher_placeholder: 'Buscar editores...',
                sort_by_label: 'Ordenar por',
                sort_newest: 'Fecha (Más reciente primero)',
                sort_oldest: 'Fecha (Más antiguo primero)',
                sort_views: 'Vistas (Más primero)',
                sort_likes: 'Me gusta (Más primero)',
                sort_comments: 'Comentarios (Más primero)',
                per_page_label: 'Elementos por página',
                all: 'Todos',
                quick_time_label: 'Rango de tiempo rápido',
                all_time: 'Todo el tiempo',
                past_7_days: 'Últimos 7 días',
                past_14_days: 'Últimos 14 días',
                past_30_days: 'Últimos 30 días',
                past_60_days: 'Últimos 60 días',
                past_90_days: 'Últimos 90 días',
                past_120_days: 'Últimos 120 días',
                past_180_days: 'Últimos 180 días',
                past_360_days: 'Últimos 360 días',
                past_720_days: 'Últimos 720 días',
                custom_range_label: 'Rango de tiempo personalizado',
                to: 'a',
                clear_filters_button: 'Limpiar filtros',
                export_excel_button: 'Exportar a Excel',
                prev_page: 'Anterior',
                next_page: 'Siguiente',
                loading_data: 'Cargando datos...',
                no_data_message: 'No hay datos en la base de datos. Por favor, obtenga de YouTube primero.',
                no_results_message: 'No se encontraron resultados coincidentes.',
                modal_title_default: 'Descripción del video',
                copy_description: 'Copiar descripción',
                view_description: 'Ver descripción',
                views: 'Vistas',
                likes: 'Me gusta',
                comments: 'Comentarios',
                add_remark_placeholder: 'Añadir comentario...',
                copied: '¡Copiado!',
                no_description: 'No hay descripción disponible.',
                page_info: 'Página {current} / {total}',
                data_count_info: 'Mostrando {filtered} / {total} videos',
                loading_data_error: 'Error al cargar los datos.',
                status_no_channel_id: 'Por favor, ingrese al menos un ID de canal o nombre de usuario.',
                status_no_channel_selected: 'Por favor, seleccione al menos un editor para actualizar.',
                status_fetching_from_channels: 'Obteniendo datos de {count} canales...',
                status_no_keyword: 'Por favor, ingrese una palabra clave.',
                status_searching_by_keyword: 'Buscando por palabra clave "{keyword}"...',
                status_fetch_success: 'Operación completa. {count} registros añadidos o actualizados.',
                status_fetch_error: 'Error: {message}',
            },
            'de': {
                page_title: 'YouTube-Videosuche & -Export',
                main_title: 'YouTube-Videosuche & -Export',
                main_subtitle: 'Videodaten von YouTube abrufen, in der Datenbank speichern, dann anzeigen, filtern und exportieren.',
                fetch_data_title: '1. Daten von YouTube abrufen',
                tab_by_channel: 'Nach Kanal',
                tab_by_select: 'Vorhandene auswählen',
                tab_by_keyword: 'Nach Schlüsselwort',
                channel_input_label: 'Kanal-IDs oder Benutzernamen eingeben',
                channel_input_placeholder: 'Kanal-IDs (UC...) oder Benutzernamen (@Benutzername) eingeben, getrennt durch Kommas, Semikolons oder Zeilenumbrüche',
                channel_select_label: 'Zu aktualisierende Publisher auswählen',
                channel_select_placeholder: 'Bitte Publisher auswählen...',
                channels_selected: '{count} Publisher ausgewählt',
                keyword_input_label: 'Suchbegriff eingeben',
                keyword_input_placeholder: 'z.B. \'Node.js Tutorial\'',
                fetch_data_button: 'Daten abrufen & speichern',
                filter_keyword_label: 'Nach Schlüsselwort filtern',
                filter_keyword_placeholder: 'Nach Titel oder Beschreibung filtern...',
                publisher_label: 'Publisher',
                all_publishers: 'Alle Publisher',
                search_publisher_placeholder: 'Publisher suchen...',
                sort_by_label: 'Sortieren nach',
                sort_newest: 'Datum (Neueste zuerst)',
                sort_oldest: 'Datum (Älteste zuerst)',
                sort_views: 'Aufrufe (Meiste zuerst)',
                sort_likes: 'Likes (Meiste zuerst)',
                sort_comments: 'Kommentare (Meiste zuerst)',
                per_page_label: 'Einträge pro Seite',
                all: 'Alle',
                quick_time_label: 'Schneller Zeitbereich',
                all_time: 'Gesamter Zeitraum',
                past_7_days: 'Letzte 7 Tage',
                past_14_days: 'Letzte 14 Tage',
                past_30_days: 'Letzte 30 Tage',
                past_60_days: 'Letzte 60 Tage',
                past_90_days: 'Letzte 90 Tage',
                past_120_days: 'Letzte 120 Tage',
                past_180_days: 'Letzte 180 Tage',
                past_360_days: 'Letzte 360 Tage',
                past_720_days: 'Letzte 720 Tage',
                custom_range_label: 'Benutzerdefinierter Zeitbereich',
                to: 'bis',
                clear_filters_button: 'Filter löschen',
                export_excel_button: 'Excel exportieren',
                prev_page: 'Zurück',
                next_page: 'Weiter',
                loading_data: 'Daten werden geladen...',
                no_data_message: 'Keine Daten in der Datenbank. Bitte zuerst von YouTube abrufen.',
                no_results_message: 'Keine passenden Ergebnisse gefunden.',
                modal_title_default: 'Videobeschreibung',
                copy_description: 'Beschreibung kopieren',
                view_description: 'Beschreibung ansehen',
                views: 'Aufrufe',
                likes: 'Likes',
                comments: 'Kommentare',
                add_remark_placeholder: 'Anmerkung hinzufügen...',
                copied: 'Kopiert!',
                no_description: 'Keine Beschreibung verfügbar.',
                page_info: 'Seite {current} / {total}',
                data_count_info: 'Zeige {filtered} / {total} Videos',
                loading_data_error: 'Fehler beim Laden der Daten.',
                status_no_channel_id: 'Bitte geben Sie mindestens eine Kanal-ID oder einen Benutzernamen ein.',
                status_no_channel_selected: 'Bitte wählen Sie mindestens einen Publisher zum Aktualisieren aus.',
                status_fetching_from_channels: 'Daten von {count} Kanälen werden abgerufen...',
                status_no_keyword: 'Bitte geben Sie ein Schlüsselwort ein.',
                status_searching_by_keyword: 'Suche nach Schlüsselwort "{keyword}"...',
                status_fetch_success: 'Vorgang abgeschlossen. {count} Datensätze hinzugefügt oder aktualisiert.',
                status_fetch_error: 'Fehler: {message}',
            },
            'it': {
                page_title: 'Ricerca ed Esportazione Video di YouTube',
                main_title: 'Ricerca ed Esportazione Video di YouTube',
                main_subtitle: 'Recupera i dati dei video da YouTube, salvali nel database, quindi visualizzali, filtrali ed esportali.',
                fetch_data_title: '1. Recupera dati da YouTube',
                tab_by_channel: 'Per Canale',
                tab_by_select: 'Seleziona Esistenti',
                tab_by_keyword: 'Per Parola Chiave',
                channel_input_label: 'Inserisci ID canale o nomi utente',
                channel_input_placeholder: 'Inserisci ID canale (UC...) o nomi utente (@utente), separati da virgole, punto e virgola o a capo',
                channel_select_label: 'Seleziona editori da aggiornare',
                channel_select_placeholder: 'Seleziona editori...',
                channels_selected: '{count} editore/i selezionato/i',
                keyword_input_label: 'Inserisci parola chiave di ricerca',
                keyword_input_placeholder: 'es. \'Tutorial Node.js\'',
                fetch_data_button: 'Recupera e Salva',
                filter_keyword_label: 'Filtra per parola chiave',
                filter_keyword_placeholder: 'Filtra per titolo o descrizione...',
                publisher_label: 'Editore',
                all_publishers: 'Tutti gli editori',
                search_publisher_placeholder: 'Cerca editori...',
                sort_by_label: 'Ordina per',
                sort_newest: 'Data (Più recente)',
                sort_oldest: 'Data (Meno recente)',
                sort_views: 'Visualizzazioni (Le più numerose)',
                sort_likes: 'Mi piace (I più numerosi)',
                sort_comments: 'Commenti (I più numerosi)',
                per_page_label: 'Elementi per pagina',
                all: 'Tutti',
                quick_time_label: 'Intervallo rapido',
                all_time: 'Sempre',
                past_7_days: 'Ultimi 7 giorni',
                past_14_days: 'Ultimi 14 giorni',
                past_30_days: 'Ultimi 30 giorni',
                past_60_days: 'Ultimi 60 giorni',
                past_90_days: 'Ultimi 90 giorni',
                past_120_days: 'Ultimi 120 giorni',
                past_180_days: 'Ultimi 180 giorni',
                past_360_days: 'Ultimi 360 giorni',
                past_720_days: 'Ultimi 720 giorni',
                custom_range_label: 'Intervallo personalizzato',
                to: 'a',
                clear_filters_button: 'Cancella filtri',
                export_excel_button: 'Esporta Excel',
                prev_page: 'Precedente',
                next_page: 'Successivo',
                loading_data: 'Caricamento dati...',
                no_data_message: 'Nessun dato nel database. Recupera prima da YouTube.',
                no_results_message: 'Nessun risultato corrispondente trovato.',
                modal_title_default: 'Descrizione del video',
                copy_description: 'Copia descrizione',
                view_description: 'Visualizza descrizione',
                views: 'Visualizzazioni',
                likes: 'Mi piace',
                comments: 'Commenti',
                add_remark_placeholder: 'Aggiungi nota...',
                copied: 'Copiato!',
                no_description: 'Nessuna descrizione disponibile.',
                page_info: 'Pagina {current} / {total}',
                data_count_info: 'Mostrando {filtered} / {total} video',
                loading_data_error: 'Caricamento dati fallito.',
                status_no_channel_id: 'Inserisci almeno un ID canale o un nome utente.',
                status_no_channel_selected: 'Seleziona almeno un editore da aggiornare.',
                status_fetching_from_channels: 'Recupero dati da {count} canali...',
                status_no_keyword: 'Inserisci una parola chiave.',
                status_searching_by_keyword: 'Ricerca per parola chiave "{keyword}"...',
                status_fetch_success: 'Operazione completata. {count} record aggiunti o aggiornati.',
                status_fetch_error: 'Errore: {message}',
            },
            'ru': {
                page_title: 'Поиск и экспорт видео с YouTube',
                main_title: 'Поиск и экспорт видео с YouTube',
                main_subtitle: 'Получайте данные о видео с YouTube, сохраняйте в базу данных, а затем отображайте, фильтруйте и экспортируйте.',
                fetch_data_title: '1. Получить данные с YouTube',
                tab_by_channel: 'По каналу',
                tab_by_select: 'Выбрать из существующих',
                tab_by_keyword: 'По ключевому слову',
                channel_input_label: 'Введите ID каналов или имена пользователей',
                channel_input_placeholder: 'Введите ID каналов (UC...) или имена пользователей (@имя), разделяя их запятыми, точками с запятой или переносами строк',
                channel_select_label: 'Выберите издателей для обновления',
                channel_select_placeholder: 'Пожалуйста, выберите издателей...',
                channels_selected: 'Выбрано издателей: {count}',
                keyword_input_label: 'Введите ключевое слово для поиска',
                keyword_input_placeholder: 'например, \'Учебник по Node.js\'',
                fetch_data_button: 'Получить и сохранить',
                filter_keyword_label: 'Фильтровать по ключевому слову',
                filter_keyword_placeholder: 'Фильтровать по названию или описанию...',
                publisher_label: 'Издатель',
                all_publishers: 'Все издатели',
                search_publisher_placeholder: 'Искать издателей...',
                sort_by_label: 'Сортировать по',
                sort_newest: 'Дата (сначала новые)',
                sort_oldest: 'Дата (сначала старые)',
                sort_views: 'Просмотры (сначала много)',
                sort_likes: 'Лайки (сначала много)',
                sort_comments: 'Комментарии (сначала много)',
                per_page_label: 'Элементов на странице',
                all: 'Все',
                quick_time_label: 'Быстрый диапазон времени',
                all_time: 'За все время',
                past_7_days: 'Последние 7 дней',
                past_14_days: 'Последние 14 дней',
                past_30_days: 'Последние 30 дней',
                past_60_days: 'Последние 60 дней',
                past_90_days: 'Последние 90 дней',
                past_120_days: 'Последние 120 дней',
                past_180_days: 'Последние 180 дней',
                past_360_days: 'Последние 360 дней',
                past_720_days: 'Последние 720 дней',
                custom_range_label: 'Пользовательский диапазон времени',
                to: 'до',
                clear_filters_button: 'Очистить фильтры',
                export_excel_button: 'Экспорт в Excel',
                prev_page: 'Назад',
                next_page: 'Вперед',
                loading_data: 'Загрузка данных...',
                no_data_message: 'В базе данных нет данных. Сначала получите их с YouTube.',
                no_results_message: 'Совпадающих результатов не найдено.',
                modal_title_default: 'Описание видео',
                copy_description: 'Копировать описание',
                view_description: 'Посмотреть описание',
                views: 'Просмотры',
                likes: 'Лайки',
                comments: 'Комментарии',
                add_remark_placeholder: 'Добавить примечание...',
                copied: 'Скопировано!',
                no_description: 'Описание недоступно.',
                page_info: 'Страница {current} / {total}',
                data_count_info: 'Показано {filtered} / {total} видео',
                loading_data_error: 'Ошибка загрузки данных.',
                status_no_channel_id: 'Пожалуйста, введите хотя бы один ID канала или имя пользователя.',
                status_no_channel_selected: 'Пожалуйста, выберите хотя бы одного издателя для обновления.',
                status_fetching_from_channels: 'Получение данных с {count} каналов...',
                status_no_keyword: 'Пожалуйста, введите ключевое слово.',
                status_searching_by_keyword: 'Поиск по ключевому слову "{keyword}"...',
                status_fetch_success: 'Операция завершена. Добавлено или обновлено {count} записей.',
                status_fetch_error: 'Ошибка: {message}',
            },
            'ja': {
                page_title: 'YouTube動画検索＆エクスポート',
                main_title: 'YouTube動画検索＆エクスポート',
                main_subtitle: 'YouTubeから動画データを取得し、データベースに保存し、表示、フィルタリング、エクスポートを行います。',
                fetch_data_title: '1. YouTubeからデータを取得',
                tab_by_channel: 'チャンネルで取得',
                tab_by_select: '既存から選択',
                tab_by_keyword: 'キーワードで検索',
                channel_input_label: 'チャンネルIDまたはユーザー名を入力',
                channel_input_placeholder: 'チャンネルID (UC...) またはユーザー名 (@username) をコンマ、セミコロン、または改行で区切って入力',
                channel_select_label: '更新するパブリッシャーを選択',
                channel_select_placeholder: 'パブリッシャーを選択してください...',
                channels_selected: '{count}件のパブリッシャーが選択されました',
                keyword_input_label: '検索キーワードを入力',
                keyword_input_placeholder: '例: \'Node.js チュートリアル\'',
                fetch_data_button: 'データを取得して保存',
                filter_keyword_label: 'キーワードで絞り込み',
                filter_keyword_placeholder: 'タイトルまたは説明で絞り込み...',
                publisher_label: 'パブリッシャー',
                all_publishers: 'すべてのパブリッシャー',
                search_publisher_placeholder: 'パブリッシャーを検索...',
                sort_by_label: '並べ替え',
                sort_newest: '日付 (新しい順)',
                sort_oldest: '日付 (古い順)',
                sort_views: '再生回数 (多い順)',
                sort_likes: '高評価数 (多い順)',
                sort_comments: 'コメント数 (多い順)',
                per_page_label: 'ページあたりの項目数',
                all: 'すべて',
                quick_time_label: 'クイック期間',
                all_time: '全期間',
                past_7_days: '過去7日間',
                past_14_days: '過去14日間',
                past_30_days: '過去30日間',
                past_60_days: '過去60日間',
                past_90_days: '過去90日間',
                past_120_days: '過去120日間',
                past_180_days: '過去180日間',
                past_360_days: '過去360日間',
                past_720_days: '過去720日間',
                custom_range_label: 'カスタム期間',
                to: 'から',
                clear_filters_button: 'フィルタをクリア',
                export_excel_button: 'Excelエクスポート',
                prev_page: '前へ',
                next_page: '次へ',
                loading_data: 'データを読み込んでいます...',
                no_data_message: 'データベースにデータがありません。まずYouTubeから取得してください。',
                no_results_message: '一致する結果が見つかりませんでした。',
                modal_title_default: '動画の説明',
                copy_description: '説明をコピー',
                view_description: '説明を表示',
                views: '再生回数',
                likes: '高評価',
                comments: 'コメント',
                add_remark_placeholder: '備考を追加...',
                copied: 'コピーしました！',
                no_description: '利用可能な説明はありません。',
                page_info: 'ページ {current} / {total}',
                data_count_info: '{total}件中{filtered}件の動画を表示',
                loading_data_error: 'データの読み込みに失敗しました。',
                status_no_channel_id: '少なくとも1つのチャンネルIDまたはユーザー名を入力してください。',
                status_no_channel_selected: '更新するパブリッシャーを少なくとも1つ選択してください。',
                status_fetching_from_channels: '{count}個のチャンネルからデータを取得しています...',
                status_no_keyword: 'キーワードを入力してください。',
                status_searching_by_keyword: 'キーワード「{keyword}」で検索中...',
                status_fetch_success: '操作が完了しました。{count}件のレコードが追加または更新されました。',
                status_fetch_error: 'エラー: {message}',
            },
            'ko': {
                page_title: 'YouTube 동영상 검색 및 내보내기',
                main_title: 'YouTube 동영상 검색 및 내보내기',
                main_subtitle: 'YouTube에서 동영상 데이터를 가져와 데이터베이스에 저장한 다음 표시, 필터링 및 내보내기합니다.',
                fetch_data_title: '1. YouTube에서 데이터 가져오기',
                tab_by_channel: '채널별로 가져오기',
                tab_by_select: '기존 항목에서 선택',
                tab_by_keyword: '키워드로 검색',
                channel_input_label: '채널 ID 또는 사용자 이름 입력',
                channel_input_placeholder: '채널 ID(UC...) 또는 사용자 이름(@username)을 쉼표, 세미콜론 또는 줄 바꿈으로 구분하여 입력',
                channel_select_label: '업데이트할 게시자 선택',
                channel_select_placeholder: '게시자를 선택하세요...',
                channels_selected: '{count}명의 게시자가 선택되었습니다',
                keyword_input_label: '검색 키워드 입력',
                keyword_input_placeholder: '예: \'Node.js 튜토리얼\'',
                fetch_data_button: '데이터 가져오기 및 저장',
                filter_keyword_label: '키워드로 필터링',
                filter_keyword_placeholder: '제목 또는 설명으로 필터링...',
                publisher_label: '게시자',
                all_publishers: '모든 게시자',
                search_publisher_placeholder: '게시자 검색...',
                sort_by_label: '정렬 기준',
                sort_newest: '날짜 (최신순)',
                sort_oldest: '날짜 (오래된순)',
                sort_views: '조회수 (많은 순)',
                sort_likes: '좋아요 수 (많은 순)',
                sort_comments: '댓글 수 (많은 순)',
                per_page_label: '페이지당 항목 수',
                all: '모두',
                quick_time_label: '빠른 시간 범위',
                all_time: '모든 시간',
                past_7_days: '지난 7일',
                past_14_days: '지난 14일',
                past_30_days: '지난 30일',
                past_60_days: '지난 60일',
                past_90_days: '지난 90일',
                past_120_days: '지난 120일',
                past_180_days: '지난 180일',
                past_360_days: '지난 360일',
                past_720_days: '지난 720일',
                custom_range_label: '사용자 지정 시간 범위',
                to: '~',
                clear_filters_button: '필터 지우기',
                export_excel_button: 'Excel로 내보내기',
                prev_page: '이전',
                next_page: '다음',
                loading_data: '데이터 로딩 중...',
                no_data_message: '데이터베이스에 데이터가 없습니다. 먼저 YouTube에서 가져오세요.',
                no_results_message: '일치하는 결과가 없습니다.',
                modal_title_default: '동영상 설명',
                copy_description: '설명 복사',
                view_description: '설명 보기',
                views: '조회수',
                likes: '좋아요',
                comments: '댓글',
                add_remark_placeholder: '비고 추가...',
                copied: '복사되었습니다!',
                no_description: '설명이 없습니다.',
                page_info: '페이지 {current} / {total}',
                data_count_info: '{total}개 중 {filtered}개 동영상 표시',
                loading_data_error: '데이터를 로드하지 못했습니다.',
                status_no_channel_id: '하나 이상의 채널 ID 또는 사용자 이름을 입력하세요.',
                status_no_channel_selected: '업데이트할 게시자를 하나 이상 선택하세요.',
                status_fetching_from_channels: '{count}개 채널에서 데이터 가져오는 중...',
                status_no_keyword: '키워드를 입력하세요.',
                status_searching_by_keyword: '키워드 "{keyword}"로 검색 중...',
                status_fetch_success: '작업이 완료되었습니다. {count}개의 레코드가 추가 또는 업데이트되었습니다.',
                status_fetch_error: '오류: {message}',
            },
            'zh-CN': {
                page_title: 'YouTube 视频搜索与导出',
                main_title: 'YouTube 视频搜索与导出',
                main_subtitle: '从 YouTube 获取视频数据，存入数据库，然后进行展示、筛选和导出。',
                fetch_data_title: '1. 从 YouTube 获取数据',
                tab_by_channel: '按频道获取',
                tab_by_select: '从已有选择',
                tab_by_keyword: '按关键字搜索',
                channel_input_label: '输入频道ID或用户名',
                channel_input_placeholder: '输入频道ID (UC...) 或用户名 (@username)，用逗号、分号或换行分隔',
                channel_select_label: '选择要更新的发布者',
                channel_select_placeholder: '请选择发布者...',
                channels_selected: '已选择 {count} 个发布者',
                keyword_input_label: '输入搜索关键字',
                keyword_input_placeholder: '例如: \'Node.js 教程\'',
                fetch_data_button: '获取数据并入库',
                filter_keyword_label: '筛选关键词',
                filter_keyword_placeholder: '筛选标题或描述...',
                publisher_label: '发布者',
                all_publishers: '所有发布者',
                search_publisher_placeholder: '搜索发布者...',
                sort_by_label: '排序方式',
                sort_newest: '发布时间 (由近至远)',
                sort_oldest: '发布时间 (由远至近)',
                sort_views: '观看数 (由多到少)',
                sort_likes: '点赞数 (由多到少)',
                sort_comments: '评论数 (由多到少)',
                per_page_label: '每页显示',
                all: '全部',
                quick_time_label: '快捷时间',
                all_time: '所有时间',
                past_7_days: '过去7天',
                past_14_days: '过去14天',
                past_30_days: '过去30天',
                past_60_days: '过去60天',
                past_90_days: '过去90天',
                past_120_days: '过去120天',
                past_180_days: '过去180天',
                past_360_days: '过去360天',
                past_720_days: '过去720天',
                custom_range_label: '自定义时间范围',
                to: '至',
                clear_filters_button: '清空筛选',
                export_excel_button: '导出 Excel',
                prev_page: '上一页',
                next_page: '下一页',
                loading_data: '正在加载数据...',
                no_data_message: '数据库中没有数据。请先从 YouTube 获取。',
                no_results_message: '没有匹配的结果。',
                modal_title_default: '视频描述',
                copy_description: '复制描述',
                view_description: '查看描述',
                views: '观看数',
                likes: '点赞数',
                comments: '评论数',
                add_remark_placeholder: '添加备注...',
                copied: '已复制！',
                no_description: '没有可用的描述。',
                page_info: '第 {current} / {total} 页',
                data_count_info: '显示 {filtered} / {total} 条视频',
                loading_data_error: '数据加载失败。',
                status_no_channel_id: '请输入至少一个频道ID或用户名。',
                status_no_channel_selected: '请至少选择一个要更新的发布者。',
                status_fetching_from_channels: '正在从 {count} 个频道获取数据...',
                status_no_keyword: '请输入关键词。',
                status_searching_by_keyword: '正在按关键词 "{keyword}" 搜索...',
                status_fetch_success: '操作完成，新增或更新了 {count} 条记录。',
                status_fetch_error: '错误: {message}',
            },
            'zh-TW': {
                page_title: 'YouTube 影片搜尋與匯出',
                main_title: 'YouTube 影片搜尋與匯出',
                main_subtitle: '從 YouTube 獲取影片資料，存入資料庫，然後進行展示、篩選和匯出。',
                fetch_data_title: '1. 從 YouTube 獲取資料',
                tab_by_channel: '按頻道獲取',
                tab_by_select: '從已有選擇',
                tab_by_keyword: '按關鍵字搜尋',
                channel_input_label: '輸入頻道ID或使用者名稱',
                channel_input_placeholder: '輸入頻道ID (UC...) 或使用者名稱 (@username)，用逗號、分號或換行分隔',
                channel_select_label: '選擇要更新的發布者',
                channel_select_placeholder: '請選擇發布者...',
                channels_selected: '已選擇 {count} 個發布者',
                keyword_input_label: '輸入搜尋關鍵字',
                keyword_input_placeholder: '例如: \'Node.js 教學\'',
                fetch_data_button: '獲取資料並存入資料庫',
                filter_keyword_label: '篩選關鍵詞',
                filter_keyword_placeholder: '篩選標題或描述...',
                publisher_label: '發布者',
                all_publishers: '所有發布者',
                search_publisher_placeholder: '搜尋發布者...',
                sort_by_label: '排序方式',
                sort_newest: '發布時間 (由近至遠)',
                sort_oldest: '發布時間 (由遠至近)',
                sort_views: '觀看數 (由多到少)',
                sort_likes: '按讚數 (由多到少)',
                sort_comments: '評論數 (由多到少)',
                per_page_label: '每頁顯示',
                all: '全部',
                quick_time_label: '快捷時間',
                all_time: '所有時間',
                past_7_days: '過去7天',
                past_14_days: '過去14天',
                past_30_days: '過去30天',
                past_60_days: '過去60天',
                past_90_days: '過去90天',
                past_120_days: '過去120天',
                past_180_days: '過去180天',
                past_360_days: '過去360天',
                past_720_days: '過去720天',
                custom_range_label: '自訂時間範圍',
                to: '至',
                clear_filters_button: '清空篩選',
                export_excel_button: '匯出 Excel',
                prev_page: '上一頁',
                next_page: '下一頁',
                loading_data: '正在載入資料...',
                no_data_message: '資料庫中沒有資料。請先從 YouTube 獲取。',
                no_results_message: '沒有相符的結果。',
                modal_title_default: '影片描述',
                copy_description: '複製描述',
                view_description: '查看描述',
                views: '觀看數',
                likes: '按讚數',
                comments: '評論數',
                add_remark_placeholder: '新增備註...',
                copied: '已複製！',
                no_description: '沒有可用的描述。',
                page_info: '第 {current} / {total} 頁',
                data_count_info: '顯示 {filtered} / {total} 條影片',
                loading_data_error: '資料載入失敗。',
                status_no_channel_id: '請輸入至少一個頻道ID或使用者名稱。',
                status_no_channel_selected: '請至少選擇一個要更新的發布者。',
                status_fetching_from_channels: '正在從 {count} 個頻道獲取資料...',
                status_no_keyword: '請輸入關鍵詞。',
                status_searching_by_keyword: '正在按關鍵詞 "{keyword}" 搜尋...',
                status_fetch_success: '操作完成，新增或更新了 {count} 條記錄。',
                status_fetch_error: '錯誤: {message}',
            },
            'hi': {
                page_title: 'यूट्यूब वीडियो खोज और निर्यात',
                main_title: 'यूट्यूब वीडियो खोज और निर्यात',
                main_subtitle: 'यूट्यूब से वीडियो डेटा प्राप्त करें, डेटाबेस में सहेजें, फिर प्रदर्शित करें, फ़िल्टर करें और निर्यात करें।',
                fetch_data_title: '1. यूट्यूब से डेटा प्राप्त करें',
                tab_by_channel: 'चैनल द्वारा',
                tab_by_select: 'मौजूदा से चुनें',
                tab_by_keyword: 'कीवर्ड द्वारा',
                channel_input_label: 'चैनल आईडी या उपयोगकर्ता नाम दर्ज करें',
                channel_input_placeholder: 'चैनल आईडी (UC...) या उपयोगकर्ता नाम (@username) दर्ज करें, अल्पविराम, अर्धविराम, या नई पंक्तियों से अलग किया गया',
                channel_select_label: 'अपडेट करने के लिए प्रकाशकों का चयन करें',
                channel_select_placeholder: 'कृपया प्रकाशकों का चयन करें...',
                channels_selected: '{count} प्रकाशक चुने गए',
                keyword_input_label: 'खोज कीवर्ड दर्ज करें',
                keyword_input_placeholder: 'उदा., \'Node.js ट्यूटोरियल\'',
                fetch_data_button: 'डेटा प्राप्त करें और सहेजें',
                filter_keyword_label: 'कीवर्ड द्वारा फ़िल्टर करें',
                filter_keyword_placeholder: 'शीर्षक या विवरण द्वारा फ़िल्टर करें...',
                publisher_label: 'प्रकाशक',
                all_publishers: 'सभी प्रकाशक',
                search_publisher_placeholder: 'प्रकाशकों को खोजें...',
                sort_by_label: 'क्रमबद्ध करें',
                sort_newest: 'तिथि (नवीनतम पहले)',
                sort_oldest: 'तिथि (सबसे पुराना पहले)',
                sort_views: 'विचार (सबसे अधिक पहले)',
                sort_likes: 'पसंद (सबसे अधिक पहले)',
                sort_comments: 'टिप्पणियाँ (सबसे अधिक पहले)',
                per_page_label: 'प्रति पृष्ठ आइटम',
                all: 'सभी',
                quick_time_label: 'त्वरित समय सीमा',
                all_time: 'हर समय',
                past_7_days: 'पिछले 7 दिन',
                past_14_days: 'पिछले 14 दिन',
                past_30_days: 'पिछले 30 दिन',
                past_60_days: 'पिछले 60 दिन',
                past_90_days: 'पिछले 90 दिन',
                past_120_days: 'पिछले 120 दिन',
                past_180_days: 'पिछले 180 दिन',
                past_360_days: 'पिछले 360 दिन',
                past_720_days: 'पिछले 720 दिन',
                custom_range_label: 'कस्टम समय सीमा',
                to: 'से',
                clear_filters_button: 'फ़िल्टर साफ़ करें',
                export_excel_button: 'एक्सेल निर्यात करें',
                prev_page: 'पिछला',
                next_page: 'अगला',
                loading_data: 'डेटा लोड हो रहा है...',
                no_data_message: 'डेटाबेस में कोई डेटा नहीं है। कृपया पहले यूट्यूब से प्राप्त करें।',
                no_results_message: 'कोई मेल खाने वाला परिणाम नहीं मिला।',
                modal_title_default: 'वीडियो विवरण',
                copy_description: 'विवरण कॉपी करें',
                view_description: 'विवरण देखें',
                views: 'विचार',
                likes: 'पसंद',
                comments: 'टिप्पणियाँ',
                add_remark_placeholder: 'टिप्पणी जोड़ें...',
                copied: 'कॉपी किया गया!',
                no_description: 'कोई विवरण उपलब्ध नहीं है।',
                page_info: 'पृष्ठ {current} / {total}',
                data_count_info: '{total} में से {filtered} वीडियो दिखा रहा है',
                loading_data_error: 'डेटा लोड करने में विफल।',
                status_no_channel_id: 'कृपया कम से कम एक चैनल आईडी या उपयोगकर्ता नाम दर्ज करें।',
                status_no_channel_selected: 'कृपया अपडेट करने के लिए कम से कम एक प्रकाशक का चयन करें।',
                status_fetching_from_channels: '{count} चैनलों से डेटा प्राप्त किया जा रहा है...',
                status_no_keyword: 'कृपया एक कीवर्ड दर्ज करें।',
                status_searching_by_keyword: 'कीवर्ड "{keyword}" द्वारा खोजा जा रहा है...',
                status_fetch_success: 'ऑपरेशन पूरा हुआ। {count} रिकॉर्ड जोड़े या अपडेट किए गए।',
                status_fetch_error: 'त्रुटि: {message}',
            },
            'th': {
                page_title: 'ค้นหาและส่งออกวิดีโอ YouTube',
                main_title: 'ค้นหาและส่งออกวิดีโอ YouTube',
                main_subtitle: 'ดึงข้อมูลวิดีโอจาก YouTube บันทึกลงในฐานข้อมูล จากนั้นแสดง กรอง และส่งออก',
                fetch_data_title: '1. ดึงข้อมูลจาก YouTube',
                tab_by_channel: 'ตามช่อง',
                tab_by_select: 'เลือกจากที่มีอยู่',
                tab_by_keyword: 'ตามคำค้นหา',
                channel_input_label: 'ป้อนรหัสช่องหรือชื่อผู้ใช้',
                channel_input_placeholder: 'ป้อนรหัสช่อง (UC...) หรือชื่อผู้ใช้ (@username) โดยคั่นด้วยจุลภาค อัฒภาค หรือขึ้นบรรทัดใหม่',
                channel_select_label: 'เลือกผู้เผยแพร่ที่จะอัปเดต',
                channel_select_placeholder: 'กรุณาเลือกผู้เผยแพร่...',
                channels_selected: 'เลือกแล้ว {count} รายการ',
                keyword_input_label: 'ป้อนคำค้นหา',
                keyword_input_placeholder: 'เช่น \'สอน Node.js\'',
                fetch_data_button: 'ดึงข้อมูลและบันทึก',
                filter_keyword_label: 'กรองตามคำค้นหา',
                filter_keyword_placeholder: 'กรองตามชื่อหรือคำอธิบาย...',
                publisher_label: 'ผู้เผยแพร่',
                all_publishers: 'ผู้เผยแพร่ทั้งหมด',
                search_publisher_placeholder: 'ค้นหาผู้เผยแพร่...',
                sort_by_label: 'เรียงตาม',
                sort_newest: 'วันที่ (ใหม่สุดก่อน)',
                sort_oldest: 'วันที่ (เก่าสุดก่อน)',
                sort_views: 'ยอดดู (มากไปน้อย)',
                sort_likes: 'ยอดไลค์ (มากไปน้อย)',
                sort_comments: 'ความคิดเห็น (มากไปน้อย)',
                per_page_label: 'รายการต่อหน้า',
                all: 'ทั้งหมด',
                quick_time_label: 'ช่วงเวลาด่วน',
                all_time: 'ทุกเวลา',
                past_7_days: '7 วันที่ผ่านมา',
                past_14_days: '14 วันที่ผ่านมา',
                past_30_days: '30 วันที่ผ่านมา',
                past_60_days: '60 วันที่ผ่านมา',
                past_90_days: '90 วันที่ผ่านมา',
                past_120_days: '120 วันที่ผ่านมา',
                past_180_days: '180 วันที่ผ่านมา',
                past_360_days: '360 วันที่ผ่านมา',
                past_720_days: '720 วันที่ผ่านมา',
                custom_range_label: 'ช่วงเวลาที่กำหนดเอง',
                to: 'ถึง',
                clear_filters_button: 'ล้างตัวกรอง',
                export_excel_button: 'ส่งออกเป็น Excel',
                prev_page: 'ก่อนหน้า',
                next_page: 'ถัดไป',
                loading_data: 'กำลังโหลดข้อมูล...',
                no_data_message: 'ไม่มีข้อมูลในฐานข้อมูล กรุณาดึงข้อมูลจาก YouTube ก่อน',
                no_results_message: 'ไม่พบผลลัพธ์ที่ตรงกัน',
                modal_title_default: 'คำอธิบายวิดีโอ',
                copy_description: 'คัดลอกคำอธิบาย',
                view_description: 'ดูคำอธิบาย',
                views: 'ยอดดู',
                likes: 'ยอดไลค์',
                comments: 'ความคิดเห็น',
                add_remark_placeholder: 'เพิ่มหมายเหตุ...',
                copied: 'คัดลอกแล้ว!',
                no_description: 'ไม่มีคำอธิบาย',
                page_info: 'หน้า {current} / {total}',
                data_count_info: 'กำลังแสดง {filtered} จาก {total} วิดีโอ',
                loading_data_error: 'ไม่สามารถโหลดข้อมูลได้',
                status_no_channel_id: 'กรุณาป้อนรหัสช่องหรือชื่อผู้ใช้อย่างน้อยหนึ่งรายการ',
                status_no_channel_selected: 'กรุณาเลือกผู้เผยแพร่ที่จะอัปเดตอย่างน้อยหนึ่งราย',
                status_fetching_from_channels: 'กำลังดึงข้อมูลจาก {count} ช่อง...',
                status_no_keyword: 'กรุณาป้อนคำค้นหา',
                status_searching_by_keyword: 'กำลังค้นหาด้วยคำว่า "{keyword}"...',
                status_fetch_success: 'ดำเนินการเสร็จสิ้น เพิ่มหรืออัปเดตแล้ว {count} รายการ',
                status_fetch_error: 'ข้อผิดพลาด: {message}',
            },
        };


        const translate = (key, params = {}) => {
            let text = translations[state.currentLanguage]?.[key] || translations['en'][key] || key;
            for (const param in params) {
                text = text.replace(`{${param}}`, params[param]);
            }
            return text;
        };

        const translatePage = (lang, scope = document) => {
            state.currentLanguage = lang;
            document.documentElement.lang = lang.split('-')[0];
            document.title = translate('page_title');
            
            scope.querySelectorAll('[data-i18n-key]').forEach(el => {
                const key = el.dataset.i18nKey;
                el.textContent = translate(key);
            });

            scope.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
                const key = el.dataset.i18nPlaceholder;
                el.placeholder = translate(key);
            });
        };

        dom.languageSwitcher.addEventListener('change', async (e) => {
            const lang = e.target.value;
            localStorage.setItem('preferredLanguage', lang);
            translatePage(lang);
            await populateChannelFilter(); 
            await populateChannelSelect(); 
            updatePaginationControls(state.currentRenderedVideos.length); 
        });

        document.addEventListener('DOMContentLoaded', async () => {
            const preferredLanguage = localStorage.getItem('preferredLanguage') || 'zh-CN';
            dom.languageSwitcher.value = preferredLanguage;
            translatePage(preferredLanguage);
            
            await fetchInitialStats();
            await populateChannelFilter();
            await populateChannelSelect();
            await fetchAndRenderVideos();
        });
    </script>
</body>
</html>
